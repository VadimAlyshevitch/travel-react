import React, {Component} from 'react'
import classes from '../Form/Form.module.css'
import Button from '../../components/UI/Button/Button'
import Input from '../../components/UI/Input/Input'


function validateEmail(email) {
    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(String(email).toLowerCase());
}

class Form extends React.Component {

    state = {
        formControls : {
            email : {
                value : '',
                type : 'email',
                label : 'email',
                erroreMessage : 'Нет такой почты',
                valid: false,
                touched : false,
                validation : {
                    required : true,
                    email : true
                }
            },
            password : {
                value : '',
                type : 'password',
                label : 'password',
                erroreMessage : 'Неверный пароль',
                valid: false,
                touched : false,
                validation : {
                    required : true,
                    minLenght : 6
                }
            }
        }

    }

    // checkUser = () =>{
    //     const pizza = ['p', 'i', 'z', 'z', 'a']

    //     let a = pizza.indexOf('z')
    //     a += pizza.indexOf('i') + 3

    //     console.log(a);
    // }

    loginHendler = ( ) =>{

    }

    registerHandler = ( ) => {

    }
    submitHandler = event => {
        event.preventDefault()
    }
    validateControl(value, validation) {
        if (!validation) {
            return true
        }

        let isValid = true

        if (validation.required) {
            isValid = value.trim() !== '' && isValid
        }

        if (validation.email) {
            isValid = validateEmail(value) && isValid
             
        }
        if (validation.minLenght) {
            isValid = value.lenght >= validation.minLenght && isValid
        }

        return isValid
    }
    onChangeHandler = (event, controlName) => {
        console.log(`${controlName}: ` + event.target.value)
        // получение копии состояния, чтобы избежать его мутации

        const formControls = {...this.state.formControls}
        const control = { ...formControls[controlName] }
 //  проверка на валидность импуты
        control.value = event.target.value
        control.touched = true
        control.valid = this.validateControl(control.valid, control.validation)

        //обновить локальную копию formControls
        formControls[controlName] = control
        this.setState({
            formControls
        })
    }
    renderInputs() {
        const inputs = Object.keys(this.state.formControls).map((controlName, index)=>{
            const control = this.state.formControls[controlName]
            return (
                <Input 
                    key={controlName + index}
                    type={control.type}
                    value = {control.value}
                    valid={control.valid}
                    touched={control.touched}
                    label={control.label}
                    shouldValidate={true}
                    erroreMessage={control.erroreMessage}  
                    onChange={event => this.onChangeHandler(event,controlName)}  
                />
            )
        })
        return inputs

    }


    render(){
        return(

            <div className={classes.Form}>
                <div className="container">
                    <div className="form-row" style={{flexFlow : 'column'}}>
                        <h1>Авторизация</h1>
                        <form className={classes.FormAuth} onSubmit={this.submitHandler}> 
                              {
                                  this.renderInputs()
                              }
                            {/* <Input label="Login" erroreMessage="ERRORE" />
                            
                            <Input label="Password"/> */}

                            <Button type="succsess" onClick={this.loginHendler}> ENTER </Button>   
                            <Button type="succsess" onClick={this.registerHandler}> Зарегестрироваться </Button> 
                        </form>
                    </div>
                 </div>
            </div>
    
       
        )
    }
}


export default Form